// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_STCBROADMESSAGEHEADER_BROADFLAT_H_
#define FLATBUFFERS_GENERATED_STCBROADMESSAGEHEADER_BROADFLAT_H_

#include "flatbuffers/flatbuffers.h"


namespace BroadFlat {

struct StcBroadMessageHeader;

struct StcBroadMessageHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const { return GetField<uint32_t>(VT_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct StcBroadMessageHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(StcBroadMessageHeader::VT_ID, id, 0); }
  StcBroadMessageHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StcBroadMessageHeaderBuilder &operator=(const StcBroadMessageHeaderBuilder &);
  flatbuffers::Offset<StcBroadMessageHeader> Finish() {
    auto o = flatbuffers::Offset<StcBroadMessageHeader>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StcBroadMessageHeader> CreateStcBroadMessageHeader(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0) {
  StcBroadMessageHeaderBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const BroadFlat::StcBroadMessageHeader *GetStcBroadMessageHeader(const void *buf) { return flatbuffers::GetRoot<BroadFlat::StcBroadMessageHeader>(buf); }

inline bool VerifyStcBroadMessageHeaderBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<BroadFlat::StcBroadMessageHeader>(); }

inline void FinishStcBroadMessageHeaderBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<BroadFlat::StcBroadMessageHeader> root) { fbb.Finish(root); }

}  // namespace BroadFlat

#endif  // FLATBUFFERS_GENERATED_STCBROADMESSAGEHEADER_BROADFLAT_H_
